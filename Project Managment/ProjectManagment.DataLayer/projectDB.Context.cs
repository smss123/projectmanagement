//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectManagment.DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectDbEntities : DbContext
    {
        public ProjectDbEntities()
            : base("name=ProjectDbEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<DailyMovemnt> DailyMovemnts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Permession> Permessions { get; set; }
        public virtual DbSet<ProjectActivity> ProjectActivities { get; set; }
        public virtual DbSet<ProjectExpens> ProjectExpenses { get; set; }
        public virtual DbSet<ProjectOrder> ProjectOrders { get; set; }
        public virtual DbSet<ProjectProfile> ProjectProfiles { get; set; }
        public virtual DbSet<ProjectSubActivity> ProjectSubActivities { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SystemUser> SystemUsers { get; set; }
        public virtual DbSet<Thefinancier> Thefinanciers { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserGroupPermession> UserGroupPermessions { get; set; }
    
        public virtual int Account_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Account_Delete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Account_Insert(string accountName, string accountDescription, string coin, string accountNatural)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountDescriptionParameter = accountDescription != null ?
                new ObjectParameter("AccountDescription", accountDescription) :
                new ObjectParameter("AccountDescription", typeof(string));
    
            var coinParameter = coin != null ?
                new ObjectParameter("Coin", coin) :
                new ObjectParameter("Coin", typeof(string));
    
            var accountNaturalParameter = accountNatural != null ?
                new ObjectParameter("AccountNatural", accountNatural) :
                new ObjectParameter("AccountNatural", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Account_Insert", accountNameParameter, accountDescriptionParameter, coinParameter, accountNaturalParameter);
        }
    
        public virtual int Account_Update(Nullable<int> iD, string accountName, string accountDescription, string coin, string accountNatural)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountDescriptionParameter = accountDescription != null ?
                new ObjectParameter("AccountDescription", accountDescription) :
                new ObjectParameter("AccountDescription", typeof(string));
    
            var coinParameter = coin != null ?
                new ObjectParameter("Coin", coin) :
                new ObjectParameter("Coin", typeof(string));
    
            var accountNaturalParameter = accountNatural != null ?
                new ObjectParameter("AccountNatural", accountNatural) :
                new ObjectParameter("AccountNatural", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Account_Update", iDParameter, accountNameParameter, accountDescriptionParameter, coinParameter, accountNaturalParameter);
        }
    
        public virtual int Attachment_Delete(Nullable<int> iD, Nullable<int> projectProfile_ID, Nullable<int> projectOrder_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("ProjectProfile_ID", projectProfile_ID) :
                new ObjectParameter("ProjectProfile_ID", typeof(int));
    
            var projectOrder_IDParameter = projectOrder_ID.HasValue ?
                new ObjectParameter("ProjectOrder_ID", projectOrder_ID) :
                new ObjectParameter("ProjectOrder_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Attachment_Delete", iDParameter, projectProfile_IDParameter, projectOrder_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Attachment_Insert(string attachmentName, Nullable<System.DateTime> createDate, Nullable<int> projectProfile_ID, Nullable<int> projectOrder_ID)
        {
            var attachmentNameParameter = attachmentName != null ?
                new ObjectParameter("AttachmentName", attachmentName) :
                new ObjectParameter("AttachmentName", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("ProjectProfile_ID", projectProfile_ID) :
                new ObjectParameter("ProjectProfile_ID", typeof(int));
    
            var projectOrder_IDParameter = projectOrder_ID.HasValue ?
                new ObjectParameter("ProjectOrder_ID", projectOrder_ID) :
                new ObjectParameter("ProjectOrder_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Attachment_Insert", attachmentNameParameter, createDateParameter, projectProfile_IDParameter, projectOrder_IDParameter);
        }
    
        public virtual int Attachment_Update(Nullable<int> iD, string attachmentName, Nullable<System.DateTime> createDate, Nullable<int> projectProfile_ID, Nullable<int> projectOrder_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var attachmentNameParameter = attachmentName != null ?
                new ObjectParameter("AttachmentName", attachmentName) :
                new ObjectParameter("AttachmentName", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("ProjectProfile_ID", projectProfile_ID) :
                new ObjectParameter("ProjectProfile_ID", typeof(int));
    
            var projectOrder_IDParameter = projectOrder_ID.HasValue ?
                new ObjectParameter("ProjectOrder_ID", projectOrder_ID) :
                new ObjectParameter("ProjectOrder_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Attachment_Update", iDParameter, attachmentNameParameter, createDateParameter, projectProfile_IDParameter, projectOrder_IDParameter);
        }
    
        public virtual int Contracts_Delete(Nullable<int> iD, Nullable<int> employee_ID, Nullable<int> emplyeeAccount_ID, Nullable<int> loginInformation_ID, Nullable<int> projectToWork_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("employee_ID", employee_ID) :
                new ObjectParameter("employee_ID", typeof(int));
    
            var emplyeeAccount_IDParameter = emplyeeAccount_ID.HasValue ?
                new ObjectParameter("EmplyeeAccount_ID", emplyeeAccount_ID) :
                new ObjectParameter("EmplyeeAccount_ID", typeof(int));
    
            var loginInformation_IDParameter = loginInformation_ID.HasValue ?
                new ObjectParameter("LoginInformation_ID", loginInformation_ID) :
                new ObjectParameter("LoginInformation_ID", typeof(int));
    
            var projectToWork_IDParameter = projectToWork_ID.HasValue ?
                new ObjectParameter("ProjectToWork_ID", projectToWork_ID) :
                new ObjectParameter("ProjectToWork_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Contracts_Delete", iDParameter, employee_IDParameter, emplyeeAccount_IDParameter, loginInformation_IDParameter, projectToWork_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Contracts_Insert(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<double> selaryAmount, Nullable<bool> status, Nullable<int> employee_ID, Nullable<int> emplyeeAccount_ID, Nullable<int> loginInformation_ID, Nullable<int> projectToWork_ID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var selaryAmountParameter = selaryAmount.HasValue ?
                new ObjectParameter("SelaryAmount", selaryAmount) :
                new ObjectParameter("SelaryAmount", typeof(double));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("employee_ID", employee_ID) :
                new ObjectParameter("employee_ID", typeof(int));
    
            var emplyeeAccount_IDParameter = emplyeeAccount_ID.HasValue ?
                new ObjectParameter("EmplyeeAccount_ID", emplyeeAccount_ID) :
                new ObjectParameter("EmplyeeAccount_ID", typeof(int));
    
            var loginInformation_IDParameter = loginInformation_ID.HasValue ?
                new ObjectParameter("LoginInformation_ID", loginInformation_ID) :
                new ObjectParameter("LoginInformation_ID", typeof(int));
    
            var projectToWork_IDParameter = projectToWork_ID.HasValue ?
                new ObjectParameter("ProjectToWork_ID", projectToWork_ID) :
                new ObjectParameter("ProjectToWork_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Contracts_Insert", startDateParameter, endDateParameter, selaryAmountParameter, statusParameter, employee_IDParameter, emplyeeAccount_IDParameter, loginInformation_IDParameter, projectToWork_IDParameter);
        }
    
        public virtual int Contracts_Update(Nullable<int> iD, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<double> selaryAmount, Nullable<bool> status, Nullable<int> employee_ID, Nullable<int> emplyeeAccount_ID, Nullable<int> loginInformation_ID, Nullable<int> projectToWork_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var selaryAmountParameter = selaryAmount.HasValue ?
                new ObjectParameter("SelaryAmount", selaryAmount) :
                new ObjectParameter("SelaryAmount", typeof(double));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("employee_ID", employee_ID) :
                new ObjectParameter("employee_ID", typeof(int));
    
            var emplyeeAccount_IDParameter = emplyeeAccount_ID.HasValue ?
                new ObjectParameter("EmplyeeAccount_ID", emplyeeAccount_ID) :
                new ObjectParameter("EmplyeeAccount_ID", typeof(int));
    
            var loginInformation_IDParameter = loginInformation_ID.HasValue ?
                new ObjectParameter("LoginInformation_ID", loginInformation_ID) :
                new ObjectParameter("LoginInformation_ID", typeof(int));
    
            var projectToWork_IDParameter = projectToWork_ID.HasValue ?
                new ObjectParameter("ProjectToWork_ID", projectToWork_ID) :
                new ObjectParameter("ProjectToWork_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Contracts_Update", iDParameter, startDateParameter, endDateParameter, selaryAmountParameter, statusParameter, employee_IDParameter, emplyeeAccount_IDParameter, loginInformation_IDParameter, projectToWork_IDParameter);
        }
    
        public virtual int DailyMovemnt_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DailyMovemnt_Delete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DailyMovemnt_Insert(Nullable<int> fromAccout, Nullable<int> toAccount, Nullable<double> amount, string description, Nullable<System.DateTime> dateOfProcess)
        {
            var fromAccoutParameter = fromAccout.HasValue ?
                new ObjectParameter("FromAccout", fromAccout) :
                new ObjectParameter("FromAccout", typeof(int));
    
            var toAccountParameter = toAccount.HasValue ?
                new ObjectParameter("ToAccount", toAccount) :
                new ObjectParameter("ToAccount", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateOfProcessParameter = dateOfProcess.HasValue ?
                new ObjectParameter("DateOfProcess", dateOfProcess) :
                new ObjectParameter("DateOfProcess", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DailyMovemnt_Insert", fromAccoutParameter, toAccountParameter, amountParameter, descriptionParameter, dateOfProcessParameter);
        }
    
        public virtual int DailyMovemnt_Update(Nullable<int> iD, Nullable<int> fromAccout, Nullable<int> toAccount, Nullable<double> amount, string description, Nullable<System.DateTime> dateOfProcess)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fromAccoutParameter = fromAccout.HasValue ?
                new ObjectParameter("FromAccout", fromAccout) :
                new ObjectParameter("FromAccout", typeof(int));
    
            var toAccountParameter = toAccount.HasValue ?
                new ObjectParameter("ToAccount", toAccount) :
                new ObjectParameter("ToAccount", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateOfProcessParameter = dateOfProcess.HasValue ?
                new ObjectParameter("DateOfProcess", dateOfProcess) :
                new ObjectParameter("DateOfProcess", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DailyMovemnt_Update", iDParameter, fromAccoutParameter, toAccountParameter, amountParameter, descriptionParameter, dateOfProcessParameter);
        }
    
        public virtual int Employee_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Employee_Delete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Employee_Insert(string employeeName, string employeejobNumber, string employeeGender, string employeeNationalNumber, string phoneNumber, string mobilenumber, string email)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeejobNumberParameter = employeejobNumber != null ?
                new ObjectParameter("EmployeejobNumber", employeejobNumber) :
                new ObjectParameter("EmployeejobNumber", typeof(string));
    
            var employeeGenderParameter = employeeGender != null ?
                new ObjectParameter("EmployeeGender", employeeGender) :
                new ObjectParameter("EmployeeGender", typeof(string));
    
            var employeeNationalNumberParameter = employeeNationalNumber != null ?
                new ObjectParameter("EmployeeNationalNumber", employeeNationalNumber) :
                new ObjectParameter("EmployeeNationalNumber", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Employee_Insert", employeeNameParameter, employeejobNumberParameter, employeeGenderParameter, employeeNationalNumberParameter, phoneNumberParameter, mobilenumberParameter, emailParameter);
        }
    
        public virtual int Employee_Update(Nullable<int> iD, string employeeName, string employeejobNumber, string employeeGender, string employeeNationalNumber, string phoneNumber, string mobilenumber, string email)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeejobNumberParameter = employeejobNumber != null ?
                new ObjectParameter("EmployeejobNumber", employeejobNumber) :
                new ObjectParameter("EmployeejobNumber", typeof(string));
    
            var employeeGenderParameter = employeeGender != null ?
                new ObjectParameter("EmployeeGender", employeeGender) :
                new ObjectParameter("EmployeeGender", typeof(string));
    
            var employeeNationalNumberParameter = employeeNationalNumber != null ?
                new ObjectParameter("EmployeeNationalNumber", employeeNationalNumber) :
                new ObjectParameter("EmployeeNationalNumber", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Employee_Update", iDParameter, employeeNameParameter, employeejobNumberParameter, employeeGenderParameter, employeeNationalNumberParameter, phoneNumberParameter, mobilenumberParameter, emailParameter);
        }
    
        public virtual int GroupPermession_Delete(Nullable<int> iD, Nullable<int> permessions_ID, Nullable<int> userGroup_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var permessions_IDParameter = permessions_ID.HasValue ?
                new ObjectParameter("permessions_ID", permessions_ID) :
                new ObjectParameter("permessions_ID", typeof(int));
    
            var userGroup_IDParameter = userGroup_ID.HasValue ?
                new ObjectParameter("UserGroup_ID", userGroup_ID) :
                new ObjectParameter("UserGroup_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GroupPermession_Delete", iDParameter, permessions_IDParameter, userGroup_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GroupPermession_Insert(Nullable<bool> value, Nullable<int> permessions_ID, Nullable<int> userGroup_ID)
        {
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(bool));
    
            var permessions_IDParameter = permessions_ID.HasValue ?
                new ObjectParameter("permessions_ID", permessions_ID) :
                new ObjectParameter("permessions_ID", typeof(int));
    
            var userGroup_IDParameter = userGroup_ID.HasValue ?
                new ObjectParameter("UserGroup_ID", userGroup_ID) :
                new ObjectParameter("UserGroup_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GroupPermession_Insert", valueParameter, permessions_IDParameter, userGroup_IDParameter);
        }
    
        public virtual int GroupPermession_Update(Nullable<int> iD, Nullable<bool> value, Nullable<int> permessions_ID, Nullable<int> userGroup_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(bool));
    
            var permessions_IDParameter = permessions_ID.HasValue ?
                new ObjectParameter("permessions_ID", permessions_ID) :
                new ObjectParameter("permessions_ID", typeof(int));
    
            var userGroup_IDParameter = userGroup_ID.HasValue ?
                new ObjectParameter("UserGroup_ID", userGroup_ID) :
                new ObjectParameter("UserGroup_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GroupPermession_Update", iDParameter, valueParameter, permessions_IDParameter, userGroup_IDParameter);
        }
    
        public virtual int ProjectActivity_Delete(Nullable<int> iD, Nullable<int> acitvityAccount_ID, Nullable<int> projectProfile_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var acitvityAccount_IDParameter = acitvityAccount_ID.HasValue ?
                new ObjectParameter("AcitvityAccount_ID", acitvityAccount_ID) :
                new ObjectParameter("AcitvityAccount_ID", typeof(int));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectActivity_Delete", iDParameter, acitvityAccount_IDParameter, projectProfile_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProjectActivity_Insert(string activityName, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, Nullable<int> progress, Nullable<int> acitvityAccount_ID, Nullable<int> projectProfile_ID)
        {
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("Progress", progress) :
                new ObjectParameter("Progress", typeof(int));
    
            var acitvityAccount_IDParameter = acitvityAccount_ID.HasValue ?
                new ObjectParameter("AcitvityAccount_ID", acitvityAccount_ID) :
                new ObjectParameter("AcitvityAccount_ID", typeof(int));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProjectActivity_Insert", activityNameParameter, descriptionParameter, startDateParameter, endDateParameter, statusParameter, progressParameter, acitvityAccount_IDParameter, projectProfile_IDParameter);
        }
    
        public virtual int ProjectActivity_Update(Nullable<int> iD, string activityName, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, Nullable<int> progress, Nullable<int> acitvityAccount_ID, Nullable<int> projectProfile_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("Progress", progress) :
                new ObjectParameter("Progress", typeof(int));
    
            var acitvityAccount_IDParameter = acitvityAccount_ID.HasValue ?
                new ObjectParameter("AcitvityAccount_ID", acitvityAccount_ID) :
                new ObjectParameter("AcitvityAccount_ID", typeof(int));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectActivity_Update", iDParameter, activityNameParameter, descriptionParameter, startDateParameter, endDateParameter, statusParameter, progressParameter, acitvityAccount_IDParameter, projectProfile_IDParameter);
        }
    
        public virtual int ProjectExpenses_Delete(Nullable<int> iD, Nullable<int> subActivity_ID, Nullable<int> supplerName_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var subActivity_IDParameter = subActivity_ID.HasValue ?
                new ObjectParameter("SubActivity_ID", subActivity_ID) :
                new ObjectParameter("SubActivity_ID", typeof(int));
    
            var supplerName_IDParameter = supplerName_ID.HasValue ?
                new ObjectParameter("SupplerName_ID", supplerName_ID) :
                new ObjectParameter("SupplerName_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectExpenses_Delete", iDParameter, subActivity_IDParameter, supplerName_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProjectExpenses_Insert(string expensesName, Nullable<System.DateTime> dateofProcess, string billNumber, Nullable<double> requiarAmount, string cashingNumber, Nullable<bool> okyProjectManager, Nullable<System.DateTime> dateOfOkProjectManager, string projectMnagerComment, Nullable<bool> okyFainancManager, Nullable<System.DateTime> dateOfOkyFainancManager, string fainancManagerComment, Nullable<bool> okyAuditManager, Nullable<System.DateTime> dateOfOkyAuditManager, string auditManagerComment, Nullable<bool> okyAdministrativeManager, Nullable<System.DateTime> dateOfOkyAdministrativeManager, string administrativeManagerComment, Nullable<bool> okyPresident, Nullable<System.DateTime> dateOfOkyPresident, string presidentComment, Nullable<int> subActivity_ID, Nullable<int> supplerName_ID)
        {
            var expensesNameParameter = expensesName != null ?
                new ObjectParameter("ExpensesName", expensesName) :
                new ObjectParameter("ExpensesName", typeof(string));
    
            var dateofProcessParameter = dateofProcess.HasValue ?
                new ObjectParameter("DateofProcess", dateofProcess) :
                new ObjectParameter("DateofProcess", typeof(System.DateTime));
    
            var billNumberParameter = billNumber != null ?
                new ObjectParameter("BillNumber", billNumber) :
                new ObjectParameter("BillNumber", typeof(string));
    
            var requiarAmountParameter = requiarAmount.HasValue ?
                new ObjectParameter("RequiarAmount", requiarAmount) :
                new ObjectParameter("RequiarAmount", typeof(double));
    
            var cashingNumberParameter = cashingNumber != null ?
                new ObjectParameter("CashingNumber", cashingNumber) :
                new ObjectParameter("CashingNumber", typeof(string));
    
            var okyProjectManagerParameter = okyProjectManager.HasValue ?
                new ObjectParameter("OkyProjectManager", okyProjectManager) :
                new ObjectParameter("OkyProjectManager", typeof(bool));
    
            var dateOfOkProjectManagerParameter = dateOfOkProjectManager.HasValue ?
                new ObjectParameter("DateOfOkProjectManager", dateOfOkProjectManager) :
                new ObjectParameter("DateOfOkProjectManager", typeof(System.DateTime));
    
            var projectMnagerCommentParameter = projectMnagerComment != null ?
                new ObjectParameter("ProjectMnagerComment", projectMnagerComment) :
                new ObjectParameter("ProjectMnagerComment", typeof(string));
    
            var okyFainancManagerParameter = okyFainancManager.HasValue ?
                new ObjectParameter("OkyFainancManager", okyFainancManager) :
                new ObjectParameter("OkyFainancManager", typeof(bool));
    
            var dateOfOkyFainancManagerParameter = dateOfOkyFainancManager.HasValue ?
                new ObjectParameter("DateOfOkyFainancManager", dateOfOkyFainancManager) :
                new ObjectParameter("DateOfOkyFainancManager", typeof(System.DateTime));
    
            var fainancManagerCommentParameter = fainancManagerComment != null ?
                new ObjectParameter("FainancManagerComment", fainancManagerComment) :
                new ObjectParameter("FainancManagerComment", typeof(string));
    
            var okyAuditManagerParameter = okyAuditManager.HasValue ?
                new ObjectParameter("OkyAuditManager", okyAuditManager) :
                new ObjectParameter("OkyAuditManager", typeof(bool));
    
            var dateOfOkyAuditManagerParameter = dateOfOkyAuditManager.HasValue ?
                new ObjectParameter("DateOfOkyAuditManager", dateOfOkyAuditManager) :
                new ObjectParameter("DateOfOkyAuditManager", typeof(System.DateTime));
    
            var auditManagerCommentParameter = auditManagerComment != null ?
                new ObjectParameter("AuditManagerComment", auditManagerComment) :
                new ObjectParameter("AuditManagerComment", typeof(string));
    
            var okyAdministrativeManagerParameter = okyAdministrativeManager.HasValue ?
                new ObjectParameter("OkyAdministrativeManager", okyAdministrativeManager) :
                new ObjectParameter("OkyAdministrativeManager", typeof(bool));
    
            var dateOfOkyAdministrativeManagerParameter = dateOfOkyAdministrativeManager.HasValue ?
                new ObjectParameter("DateOfOkyAdministrativeManager", dateOfOkyAdministrativeManager) :
                new ObjectParameter("DateOfOkyAdministrativeManager", typeof(System.DateTime));
    
            var administrativeManagerCommentParameter = administrativeManagerComment != null ?
                new ObjectParameter("AdministrativeManagerComment", administrativeManagerComment) :
                new ObjectParameter("AdministrativeManagerComment", typeof(string));
    
            var okyPresidentParameter = okyPresident.HasValue ?
                new ObjectParameter("OkyPresident", okyPresident) :
                new ObjectParameter("OkyPresident", typeof(bool));
    
            var dateOfOkyPresidentParameter = dateOfOkyPresident.HasValue ?
                new ObjectParameter("DateOfOkyPresident", dateOfOkyPresident) :
                new ObjectParameter("DateOfOkyPresident", typeof(System.DateTime));
    
            var presidentCommentParameter = presidentComment != null ?
                new ObjectParameter("PresidentComment", presidentComment) :
                new ObjectParameter("PresidentComment", typeof(string));
    
            var subActivity_IDParameter = subActivity_ID.HasValue ?
                new ObjectParameter("SubActivity_ID", subActivity_ID) :
                new ObjectParameter("SubActivity_ID", typeof(int));
    
            var supplerName_IDParameter = supplerName_ID.HasValue ?
                new ObjectParameter("SupplerName_ID", supplerName_ID) :
                new ObjectParameter("SupplerName_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProjectExpenses_Insert", expensesNameParameter, dateofProcessParameter, billNumberParameter, requiarAmountParameter, cashingNumberParameter, okyProjectManagerParameter, dateOfOkProjectManagerParameter, projectMnagerCommentParameter, okyFainancManagerParameter, dateOfOkyFainancManagerParameter, fainancManagerCommentParameter, okyAuditManagerParameter, dateOfOkyAuditManagerParameter, auditManagerCommentParameter, okyAdministrativeManagerParameter, dateOfOkyAdministrativeManagerParameter, administrativeManagerCommentParameter, okyPresidentParameter, dateOfOkyPresidentParameter, presidentCommentParameter, subActivity_IDParameter, supplerName_IDParameter);
        }
    
        public virtual int ProjectExpenses_Update(Nullable<int> iD, string expensesName, Nullable<System.DateTime> dateofProcess, string billNumber, Nullable<double> requiarAmount, string cashingNumber, Nullable<bool> okyProjectManager, Nullable<System.DateTime> dateOfOkProjectManager, string projectMnagerComment, Nullable<bool> okyFainancManager, Nullable<System.DateTime> dateOfOkyFainancManager, string fainancManagerComment, Nullable<bool> okyAuditManager, Nullable<System.DateTime> dateOfOkyAuditManager, string auditManagerComment, Nullable<bool> okyAdministrativeManager, Nullable<System.DateTime> dateOfOkyAdministrativeManager, string administrativeManagerComment, Nullable<bool> okyPresident, Nullable<System.DateTime> dateOfOkyPresident, string presidentComment, Nullable<int> subActivity_ID, Nullable<int> supplerName_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var expensesNameParameter = expensesName != null ?
                new ObjectParameter("ExpensesName", expensesName) :
                new ObjectParameter("ExpensesName", typeof(string));
    
            var dateofProcessParameter = dateofProcess.HasValue ?
                new ObjectParameter("DateofProcess", dateofProcess) :
                new ObjectParameter("DateofProcess", typeof(System.DateTime));
    
            var billNumberParameter = billNumber != null ?
                new ObjectParameter("BillNumber", billNumber) :
                new ObjectParameter("BillNumber", typeof(string));
    
            var requiarAmountParameter = requiarAmount.HasValue ?
                new ObjectParameter("RequiarAmount", requiarAmount) :
                new ObjectParameter("RequiarAmount", typeof(double));
    
            var cashingNumberParameter = cashingNumber != null ?
                new ObjectParameter("CashingNumber", cashingNumber) :
                new ObjectParameter("CashingNumber", typeof(string));
    
            var okyProjectManagerParameter = okyProjectManager.HasValue ?
                new ObjectParameter("OkyProjectManager", okyProjectManager) :
                new ObjectParameter("OkyProjectManager", typeof(bool));
    
            var dateOfOkProjectManagerParameter = dateOfOkProjectManager.HasValue ?
                new ObjectParameter("DateOfOkProjectManager", dateOfOkProjectManager) :
                new ObjectParameter("DateOfOkProjectManager", typeof(System.DateTime));
    
            var projectMnagerCommentParameter = projectMnagerComment != null ?
                new ObjectParameter("ProjectMnagerComment", projectMnagerComment) :
                new ObjectParameter("ProjectMnagerComment", typeof(string));
    
            var okyFainancManagerParameter = okyFainancManager.HasValue ?
                new ObjectParameter("OkyFainancManager", okyFainancManager) :
                new ObjectParameter("OkyFainancManager", typeof(bool));
    
            var dateOfOkyFainancManagerParameter = dateOfOkyFainancManager.HasValue ?
                new ObjectParameter("DateOfOkyFainancManager", dateOfOkyFainancManager) :
                new ObjectParameter("DateOfOkyFainancManager", typeof(System.DateTime));
    
            var fainancManagerCommentParameter = fainancManagerComment != null ?
                new ObjectParameter("FainancManagerComment", fainancManagerComment) :
                new ObjectParameter("FainancManagerComment", typeof(string));
    
            var okyAuditManagerParameter = okyAuditManager.HasValue ?
                new ObjectParameter("OkyAuditManager", okyAuditManager) :
                new ObjectParameter("OkyAuditManager", typeof(bool));
    
            var dateOfOkyAuditManagerParameter = dateOfOkyAuditManager.HasValue ?
                new ObjectParameter("DateOfOkyAuditManager", dateOfOkyAuditManager) :
                new ObjectParameter("DateOfOkyAuditManager", typeof(System.DateTime));
    
            var auditManagerCommentParameter = auditManagerComment != null ?
                new ObjectParameter("AuditManagerComment", auditManagerComment) :
                new ObjectParameter("AuditManagerComment", typeof(string));
    
            var okyAdministrativeManagerParameter = okyAdministrativeManager.HasValue ?
                new ObjectParameter("OkyAdministrativeManager", okyAdministrativeManager) :
                new ObjectParameter("OkyAdministrativeManager", typeof(bool));
    
            var dateOfOkyAdministrativeManagerParameter = dateOfOkyAdministrativeManager.HasValue ?
                new ObjectParameter("DateOfOkyAdministrativeManager", dateOfOkyAdministrativeManager) :
                new ObjectParameter("DateOfOkyAdministrativeManager", typeof(System.DateTime));
    
            var administrativeManagerCommentParameter = administrativeManagerComment != null ?
                new ObjectParameter("AdministrativeManagerComment", administrativeManagerComment) :
                new ObjectParameter("AdministrativeManagerComment", typeof(string));
    
            var okyPresidentParameter = okyPresident.HasValue ?
                new ObjectParameter("OkyPresident", okyPresident) :
                new ObjectParameter("OkyPresident", typeof(bool));
    
            var dateOfOkyPresidentParameter = dateOfOkyPresident.HasValue ?
                new ObjectParameter("DateOfOkyPresident", dateOfOkyPresident) :
                new ObjectParameter("DateOfOkyPresident", typeof(System.DateTime));
    
            var presidentCommentParameter = presidentComment != null ?
                new ObjectParameter("PresidentComment", presidentComment) :
                new ObjectParameter("PresidentComment", typeof(string));
    
            var subActivity_IDParameter = subActivity_ID.HasValue ?
                new ObjectParameter("SubActivity_ID", subActivity_ID) :
                new ObjectParameter("SubActivity_ID", typeof(int));
    
            var supplerName_IDParameter = supplerName_ID.HasValue ?
                new ObjectParameter("SupplerName_ID", supplerName_ID) :
                new ObjectParameter("SupplerName_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectExpenses_Update", iDParameter, expensesNameParameter, dateofProcessParameter, billNumberParameter, requiarAmountParameter, cashingNumberParameter, okyProjectManagerParameter, dateOfOkProjectManagerParameter, projectMnagerCommentParameter, okyFainancManagerParameter, dateOfOkyFainancManagerParameter, fainancManagerCommentParameter, okyAuditManagerParameter, dateOfOkyAuditManagerParameter, auditManagerCommentParameter, okyAdministrativeManagerParameter, dateOfOkyAdministrativeManagerParameter, administrativeManagerCommentParameter, okyPresidentParameter, dateOfOkyPresidentParameter, presidentCommentParameter, subActivity_IDParameter, supplerName_IDParameter);
        }
    
        public virtual int ProjectOrder_Delete(Nullable<int> iD, Nullable<int> projectProfile_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectOrder_Delete", iDParameter, projectProfile_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProjectOrder_Insert(string orderTitle, string orderBody, Nullable<System.DateTime> orderDate, Nullable<int> projectProfile_ID)
        {
            var orderTitleParameter = orderTitle != null ?
                new ObjectParameter("OrderTitle", orderTitle) :
                new ObjectParameter("OrderTitle", typeof(string));
    
            var orderBodyParameter = orderBody != null ?
                new ObjectParameter("OrderBody", orderBody) :
                new ObjectParameter("OrderBody", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProjectOrder_Insert", orderTitleParameter, orderBodyParameter, orderDateParameter, projectProfile_IDParameter);
        }
    
        public virtual int ProjectOrder_Update(Nullable<int> iD, string orderTitle, string orderBody, Nullable<System.DateTime> orderDate, Nullable<int> projectProfile_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var orderTitleParameter = orderTitle != null ?
                new ObjectParameter("OrderTitle", orderTitle) :
                new ObjectParameter("OrderTitle", typeof(string));
    
            var orderBodyParameter = orderBody != null ?
                new ObjectParameter("OrderBody", orderBody) :
                new ObjectParameter("OrderBody", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectOrder_Update", iDParameter, orderTitleParameter, orderBodyParameter, orderDateParameter, projectProfile_IDParameter);
        }
    
        public virtual int ProjectProfile_Delete(Nullable<int> iD, Nullable<int> projectAccount_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectAccount_IDParameter = projectAccount_ID.HasValue ?
                new ObjectParameter("ProjectAccount_ID", projectAccount_ID) :
                new ObjectParameter("ProjectAccount_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectProfile_Delete", iDParameter, projectAccount_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProjectProfile_Insert(string projectName, string projectDescription, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, Nullable<int> progress, Nullable<int> projectAccount_ID)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("ProjectDescription", projectDescription) :
                new ObjectParameter("ProjectDescription", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("progress", progress) :
                new ObjectParameter("progress", typeof(int));
    
            var projectAccount_IDParameter = projectAccount_ID.HasValue ?
                new ObjectParameter("ProjectAccount_ID", projectAccount_ID) :
                new ObjectParameter("ProjectAccount_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProjectProfile_Insert", projectNameParameter, projectDescriptionParameter, startDateParameter, endDateParameter, statusParameter, progressParameter, projectAccount_IDParameter);
        }
    
        public virtual int ProjectProfile_Update(Nullable<int> iD, string projectName, string projectDescription, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, Nullable<int> progress, Nullable<int> projectAccount_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("ProjectDescription", projectDescription) :
                new ObjectParameter("ProjectDescription", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("progress", progress) :
                new ObjectParameter("progress", typeof(int));
    
            var projectAccount_IDParameter = projectAccount_ID.HasValue ?
                new ObjectParameter("ProjectAccount_ID", projectAccount_ID) :
                new ObjectParameter("ProjectAccount_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectProfile_Update", iDParameter, projectNameParameter, projectDescriptionParameter, startDateParameter, endDateParameter, statusParameter, progressParameter, projectAccount_IDParameter);
        }
    
        public virtual int ProjectSubActivity_Delete(Nullable<int> iD, Nullable<int> acitvityAccount_ID, Nullable<int> projectProfile_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var acitvityAccount_IDParameter = acitvityAccount_ID.HasValue ?
                new ObjectParameter("AcitvityAccount_ID", acitvityAccount_ID) :
                new ObjectParameter("AcitvityAccount_ID", typeof(int));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectSubActivity_Delete", iDParameter, acitvityAccount_IDParameter, projectProfile_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProjectSubActivity_Insert(string subActivityName, string description, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string status, Nullable<int> persentage, Nullable<int> acitvityAccount_ID, Nullable<int> projectProfile_ID)
        {
            var subActivityNameParameter = subActivityName != null ?
                new ObjectParameter("SubActivityName", subActivityName) :
                new ObjectParameter("SubActivityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var persentageParameter = persentage.HasValue ?
                new ObjectParameter("Persentage", persentage) :
                new ObjectParameter("Persentage", typeof(int));
    
            var acitvityAccount_IDParameter = acitvityAccount_ID.HasValue ?
                new ObjectParameter("AcitvityAccount_ID", acitvityAccount_ID) :
                new ObjectParameter("AcitvityAccount_ID", typeof(int));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProjectSubActivity_Insert", subActivityNameParameter, descriptionParameter, startdateParameter, enddateParameter, statusParameter, persentageParameter, acitvityAccount_IDParameter, projectProfile_IDParameter);
        }
    
        public virtual int ProjectSubActivity_Update(Nullable<int> iD, string subActivityName, string description, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string status, Nullable<int> persentage, Nullable<int> acitvityAccount_ID, Nullable<int> projectProfile_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var subActivityNameParameter = subActivityName != null ?
                new ObjectParameter("SubActivityName", subActivityName) :
                new ObjectParameter("SubActivityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var persentageParameter = persentage.HasValue ?
                new ObjectParameter("Persentage", persentage) :
                new ObjectParameter("Persentage", typeof(int));
    
            var acitvityAccount_IDParameter = acitvityAccount_ID.HasValue ?
                new ObjectParameter("AcitvityAccount_ID", acitvityAccount_ID) :
                new ObjectParameter("AcitvityAccount_ID", typeof(int));
    
            var projectProfile_IDParameter = projectProfile_ID.HasValue ?
                new ObjectParameter("projectProfile_ID", projectProfile_ID) :
                new ObjectParameter("projectProfile_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectSubActivity_Update", iDParameter, subActivityNameParameter, descriptionParameter, startdateParameter, enddateParameter, statusParameter, persentageParameter, acitvityAccount_IDParameter, projectProfile_IDParameter);
        }
    
        public virtual int SelaryHiracy_Delete(Nullable<int> iD, Nullable<int> emplyee_ID, Nullable<int> projectSubActivity_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var emplyee_IDParameter = emplyee_ID.HasValue ?
                new ObjectParameter("emplyee_ID", emplyee_ID) :
                new ObjectParameter("emplyee_ID", typeof(int));
    
            var projectSubActivity_IDParameter = projectSubActivity_ID.HasValue ?
                new ObjectParameter("projectSubActivity_ID", projectSubActivity_ID) :
                new ObjectParameter("projectSubActivity_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelaryHiracy_Delete", iDParameter, emplyee_IDParameter, projectSubActivity_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SelaryHiracy_Insert(Nullable<System.DateTime> dateofProcess, Nullable<double> requiarAmount, Nullable<System.DateTime> forMounth, Nullable<bool> okyProjectManager, Nullable<System.DateTime> dateOfOkProjectManager, string projectMnagerComment, Nullable<bool> okyFainancManager, Nullable<System.DateTime> dateOfOkyFainancManager, string fainancManagerComment, Nullable<bool> okyAuditManager, Nullable<System.DateTime> dateOfOkyAuditManager, string auditManagerComment, Nullable<bool> okyAdministrativeManager, Nullable<System.DateTime> dateOfOkyAdministrativeManager, string administrativeManagerComment, Nullable<bool> okyPresident, Nullable<System.DateTime> dateOfOkyPresident, string presidentComment, Nullable<int> emplyee_ID, Nullable<int> projectSubActivity_ID)
        {
            var dateofProcessParameter = dateofProcess.HasValue ?
                new ObjectParameter("DateofProcess", dateofProcess) :
                new ObjectParameter("DateofProcess", typeof(System.DateTime));
    
            var requiarAmountParameter = requiarAmount.HasValue ?
                new ObjectParameter("RequiarAmount", requiarAmount) :
                new ObjectParameter("RequiarAmount", typeof(double));
    
            var forMounthParameter = forMounth.HasValue ?
                new ObjectParameter("ForMounth", forMounth) :
                new ObjectParameter("ForMounth", typeof(System.DateTime));
    
            var okyProjectManagerParameter = okyProjectManager.HasValue ?
                new ObjectParameter("OkyProjectManager", okyProjectManager) :
                new ObjectParameter("OkyProjectManager", typeof(bool));
    
            var dateOfOkProjectManagerParameter = dateOfOkProjectManager.HasValue ?
                new ObjectParameter("DateOfOkProjectManager", dateOfOkProjectManager) :
                new ObjectParameter("DateOfOkProjectManager", typeof(System.DateTime));
    
            var projectMnagerCommentParameter = projectMnagerComment != null ?
                new ObjectParameter("ProjectMnagerComment", projectMnagerComment) :
                new ObjectParameter("ProjectMnagerComment", typeof(string));
    
            var okyFainancManagerParameter = okyFainancManager.HasValue ?
                new ObjectParameter("OkyFainancManager", okyFainancManager) :
                new ObjectParameter("OkyFainancManager", typeof(bool));
    
            var dateOfOkyFainancManagerParameter = dateOfOkyFainancManager.HasValue ?
                new ObjectParameter("DateOfOkyFainancManager", dateOfOkyFainancManager) :
                new ObjectParameter("DateOfOkyFainancManager", typeof(System.DateTime));
    
            var fainancManagerCommentParameter = fainancManagerComment != null ?
                new ObjectParameter("FainancManagerComment", fainancManagerComment) :
                new ObjectParameter("FainancManagerComment", typeof(string));
    
            var okyAuditManagerParameter = okyAuditManager.HasValue ?
                new ObjectParameter("OkyAuditManager", okyAuditManager) :
                new ObjectParameter("OkyAuditManager", typeof(bool));
    
            var dateOfOkyAuditManagerParameter = dateOfOkyAuditManager.HasValue ?
                new ObjectParameter("DateOfOkyAuditManager", dateOfOkyAuditManager) :
                new ObjectParameter("DateOfOkyAuditManager", typeof(System.DateTime));
    
            var auditManagerCommentParameter = auditManagerComment != null ?
                new ObjectParameter("AuditManagerComment", auditManagerComment) :
                new ObjectParameter("AuditManagerComment", typeof(string));
    
            var okyAdministrativeManagerParameter = okyAdministrativeManager.HasValue ?
                new ObjectParameter("OkyAdministrativeManager", okyAdministrativeManager) :
                new ObjectParameter("OkyAdministrativeManager", typeof(bool));
    
            var dateOfOkyAdministrativeManagerParameter = dateOfOkyAdministrativeManager.HasValue ?
                new ObjectParameter("DateOfOkyAdministrativeManager", dateOfOkyAdministrativeManager) :
                new ObjectParameter("DateOfOkyAdministrativeManager", typeof(System.DateTime));
    
            var administrativeManagerCommentParameter = administrativeManagerComment != null ?
                new ObjectParameter("AdministrativeManagerComment", administrativeManagerComment) :
                new ObjectParameter("AdministrativeManagerComment", typeof(string));
    
            var okyPresidentParameter = okyPresident.HasValue ?
                new ObjectParameter("OkyPresident", okyPresident) :
                new ObjectParameter("OkyPresident", typeof(bool));
    
            var dateOfOkyPresidentParameter = dateOfOkyPresident.HasValue ?
                new ObjectParameter("DateOfOkyPresident", dateOfOkyPresident) :
                new ObjectParameter("DateOfOkyPresident", typeof(System.DateTime));
    
            var presidentCommentParameter = presidentComment != null ?
                new ObjectParameter("PresidentComment", presidentComment) :
                new ObjectParameter("PresidentComment", typeof(string));
    
            var emplyee_IDParameter = emplyee_ID.HasValue ?
                new ObjectParameter("emplyee_ID", emplyee_ID) :
                new ObjectParameter("emplyee_ID", typeof(int));
    
            var projectSubActivity_IDParameter = projectSubActivity_ID.HasValue ?
                new ObjectParameter("projectSubActivity_ID", projectSubActivity_ID) :
                new ObjectParameter("projectSubActivity_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SelaryHiracy_Insert", dateofProcessParameter, requiarAmountParameter, forMounthParameter, okyProjectManagerParameter, dateOfOkProjectManagerParameter, projectMnagerCommentParameter, okyFainancManagerParameter, dateOfOkyFainancManagerParameter, fainancManagerCommentParameter, okyAuditManagerParameter, dateOfOkyAuditManagerParameter, auditManagerCommentParameter, okyAdministrativeManagerParameter, dateOfOkyAdministrativeManagerParameter, administrativeManagerCommentParameter, okyPresidentParameter, dateOfOkyPresidentParameter, presidentCommentParameter, emplyee_IDParameter, projectSubActivity_IDParameter);
        }
    
        public virtual int SelaryHiracy_Update(Nullable<int> iD, Nullable<System.DateTime> dateofProcess, Nullable<double> requiarAmount, Nullable<System.DateTime> forMounth, Nullable<bool> okyProjectManager, Nullable<System.DateTime> dateOfOkProjectManager, string projectMnagerComment, Nullable<bool> okyFainancManager, Nullable<System.DateTime> dateOfOkyFainancManager, string fainancManagerComment, Nullable<bool> okyAuditManager, Nullable<System.DateTime> dateOfOkyAuditManager, string auditManagerComment, Nullable<bool> okyAdministrativeManager, Nullable<System.DateTime> dateOfOkyAdministrativeManager, string administrativeManagerComment, Nullable<bool> okyPresident, Nullable<System.DateTime> dateOfOkyPresident, string presidentComment, Nullable<int> emplyee_ID, Nullable<int> projectSubActivity_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateofProcessParameter = dateofProcess.HasValue ?
                new ObjectParameter("DateofProcess", dateofProcess) :
                new ObjectParameter("DateofProcess", typeof(System.DateTime));
    
            var requiarAmountParameter = requiarAmount.HasValue ?
                new ObjectParameter("RequiarAmount", requiarAmount) :
                new ObjectParameter("RequiarAmount", typeof(double));
    
            var forMounthParameter = forMounth.HasValue ?
                new ObjectParameter("ForMounth", forMounth) :
                new ObjectParameter("ForMounth", typeof(System.DateTime));
    
            var okyProjectManagerParameter = okyProjectManager.HasValue ?
                new ObjectParameter("OkyProjectManager", okyProjectManager) :
                new ObjectParameter("OkyProjectManager", typeof(bool));
    
            var dateOfOkProjectManagerParameter = dateOfOkProjectManager.HasValue ?
                new ObjectParameter("DateOfOkProjectManager", dateOfOkProjectManager) :
                new ObjectParameter("DateOfOkProjectManager", typeof(System.DateTime));
    
            var projectMnagerCommentParameter = projectMnagerComment != null ?
                new ObjectParameter("ProjectMnagerComment", projectMnagerComment) :
                new ObjectParameter("ProjectMnagerComment", typeof(string));
    
            var okyFainancManagerParameter = okyFainancManager.HasValue ?
                new ObjectParameter("OkyFainancManager", okyFainancManager) :
                new ObjectParameter("OkyFainancManager", typeof(bool));
    
            var dateOfOkyFainancManagerParameter = dateOfOkyFainancManager.HasValue ?
                new ObjectParameter("DateOfOkyFainancManager", dateOfOkyFainancManager) :
                new ObjectParameter("DateOfOkyFainancManager", typeof(System.DateTime));
    
            var fainancManagerCommentParameter = fainancManagerComment != null ?
                new ObjectParameter("FainancManagerComment", fainancManagerComment) :
                new ObjectParameter("FainancManagerComment", typeof(string));
    
            var okyAuditManagerParameter = okyAuditManager.HasValue ?
                new ObjectParameter("OkyAuditManager", okyAuditManager) :
                new ObjectParameter("OkyAuditManager", typeof(bool));
    
            var dateOfOkyAuditManagerParameter = dateOfOkyAuditManager.HasValue ?
                new ObjectParameter("DateOfOkyAuditManager", dateOfOkyAuditManager) :
                new ObjectParameter("DateOfOkyAuditManager", typeof(System.DateTime));
    
            var auditManagerCommentParameter = auditManagerComment != null ?
                new ObjectParameter("AuditManagerComment", auditManagerComment) :
                new ObjectParameter("AuditManagerComment", typeof(string));
    
            var okyAdministrativeManagerParameter = okyAdministrativeManager.HasValue ?
                new ObjectParameter("OkyAdministrativeManager", okyAdministrativeManager) :
                new ObjectParameter("OkyAdministrativeManager", typeof(bool));
    
            var dateOfOkyAdministrativeManagerParameter = dateOfOkyAdministrativeManager.HasValue ?
                new ObjectParameter("DateOfOkyAdministrativeManager", dateOfOkyAdministrativeManager) :
                new ObjectParameter("DateOfOkyAdministrativeManager", typeof(System.DateTime));
    
            var administrativeManagerCommentParameter = administrativeManagerComment != null ?
                new ObjectParameter("AdministrativeManagerComment", administrativeManagerComment) :
                new ObjectParameter("AdministrativeManagerComment", typeof(string));
    
            var okyPresidentParameter = okyPresident.HasValue ?
                new ObjectParameter("OkyPresident", okyPresident) :
                new ObjectParameter("OkyPresident", typeof(bool));
    
            var dateOfOkyPresidentParameter = dateOfOkyPresident.HasValue ?
                new ObjectParameter("DateOfOkyPresident", dateOfOkyPresident) :
                new ObjectParameter("DateOfOkyPresident", typeof(System.DateTime));
    
            var presidentCommentParameter = presidentComment != null ?
                new ObjectParameter("PresidentComment", presidentComment) :
                new ObjectParameter("PresidentComment", typeof(string));
    
            var emplyee_IDParameter = emplyee_ID.HasValue ?
                new ObjectParameter("emplyee_ID", emplyee_ID) :
                new ObjectParameter("emplyee_ID", typeof(int));
    
            var projectSubActivity_IDParameter = projectSubActivity_ID.HasValue ?
                new ObjectParameter("projectSubActivity_ID", projectSubActivity_ID) :
                new ObjectParameter("projectSubActivity_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelaryHiracy_Update", iDParameter, dateofProcessParameter, requiarAmountParameter, forMounthParameter, okyProjectManagerParameter, dateOfOkProjectManagerParameter, projectMnagerCommentParameter, okyFainancManagerParameter, dateOfOkyFainancManagerParameter, fainancManagerCommentParameter, okyAuditManagerParameter, dateOfOkyAuditManagerParameter, auditManagerCommentParameter, okyAdministrativeManagerParameter, dateOfOkyAdministrativeManagerParameter, administrativeManagerCommentParameter, okyPresidentParameter, dateOfOkyPresidentParameter, presidentCommentParameter, emplyee_IDParameter, projectSubActivity_IDParameter);
        }
    
        public virtual int Suppliers_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Suppliers_Delete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Suppliers_Insert(string name, string phoneNumber, string suppliersNatural, string fax, string email, string adderss)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var suppliersNaturalParameter = suppliersNatural != null ?
                new ObjectParameter("SuppliersNatural", suppliersNatural) :
                new ObjectParameter("SuppliersNatural", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adderssParameter = adderss != null ?
                new ObjectParameter("Adderss", adderss) :
                new ObjectParameter("Adderss", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Suppliers_Insert", nameParameter, phoneNumberParameter, suppliersNaturalParameter, faxParameter, emailParameter, adderssParameter);
        }
    
        public virtual int Suppliers_Update(Nullable<int> iD, string name, string phoneNumber, string suppliersNatural, string fax, string email, string adderss)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var suppliersNaturalParameter = suppliersNatural != null ?
                new ObjectParameter("SuppliersNatural", suppliersNatural) :
                new ObjectParameter("SuppliersNatural", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adderssParameter = adderss != null ?
                new ObjectParameter("Adderss", adderss) :
                new ObjectParameter("Adderss", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Suppliers_Update", iDParameter, nameParameter, phoneNumberParameter, suppliersNaturalParameter, faxParameter, emailParameter, adderssParameter);
        }
    
        public virtual int SystemUser_Delete(Nullable<int> iD, Nullable<int> group_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var group_IDParameter = group_ID.HasValue ?
                new ObjectParameter("Group_ID", group_ID) :
                new ObjectParameter("Group_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SystemUser_Delete", iDParameter, group_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SystemUser_Insert(string userName, string password, Nullable<int> group_ID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var group_IDParameter = group_ID.HasValue ?
                new ObjectParameter("Group_ID", group_ID) :
                new ObjectParameter("Group_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SystemUser_Insert", userNameParameter, passwordParameter, group_IDParameter);
        }
    
        public virtual int SystemUser_Update(Nullable<int> iD, string userName, string password, Nullable<int> group_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var group_IDParameter = group_ID.HasValue ?
                new ObjectParameter("Group_ID", group_ID) :
                new ObjectParameter("Group_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SystemUser_Update", iDParameter, userNameParameter, passwordParameter, group_IDParameter);
        }
    
        public virtual int Transaction_Delete(Nullable<int> iD, Nullable<int> account_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var account_IDParameter = account_ID.HasValue ?
                new ObjectParameter("account_ID", account_ID) :
                new ObjectParameter("account_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transaction_Delete", iDParameter, account_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Transaction_Insert(Nullable<System.DateTime> dateOfTransaction, Nullable<double> totalIn, Nullable<double> totalOut, string description, string commandNames, Nullable<int> account_ID)
        {
            var dateOfTransactionParameter = dateOfTransaction.HasValue ?
                new ObjectParameter("DateOfTransaction", dateOfTransaction) :
                new ObjectParameter("DateOfTransaction", typeof(System.DateTime));
    
            var totalInParameter = totalIn.HasValue ?
                new ObjectParameter("TotalIn", totalIn) :
                new ObjectParameter("TotalIn", typeof(double));
    
            var totalOutParameter = totalOut.HasValue ?
                new ObjectParameter("TotalOut", totalOut) :
                new ObjectParameter("TotalOut", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var commandNamesParameter = commandNames != null ?
                new ObjectParameter("CommandNames", commandNames) :
                new ObjectParameter("CommandNames", typeof(string));
    
            var account_IDParameter = account_ID.HasValue ?
                new ObjectParameter("account_ID", account_ID) :
                new ObjectParameter("account_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Transaction_Insert", dateOfTransactionParameter, totalInParameter, totalOutParameter, descriptionParameter, commandNamesParameter, account_IDParameter);
        }
    
        public virtual int Transaction_Update(Nullable<int> iD, Nullable<System.DateTime> dateOfTransaction, Nullable<double> totalIn, Nullable<double> totalOut, string description, string commandNames, Nullable<int> account_ID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateOfTransactionParameter = dateOfTransaction.HasValue ?
                new ObjectParameter("DateOfTransaction", dateOfTransaction) :
                new ObjectParameter("DateOfTransaction", typeof(System.DateTime));
    
            var totalInParameter = totalIn.HasValue ?
                new ObjectParameter("TotalIn", totalIn) :
                new ObjectParameter("TotalIn", typeof(double));
    
            var totalOutParameter = totalOut.HasValue ?
                new ObjectParameter("TotalOut", totalOut) :
                new ObjectParameter("TotalOut", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var commandNamesParameter = commandNames != null ?
                new ObjectParameter("CommandNames", commandNames) :
                new ObjectParameter("CommandNames", typeof(string));
    
            var account_IDParameter = account_ID.HasValue ?
                new ObjectParameter("account_ID", account_ID) :
                new ObjectParameter("account_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transaction_Update", iDParameter, dateOfTransactionParameter, totalInParameter, totalOutParameter, descriptionParameter, commandNamesParameter, account_IDParameter);
        }
    
        public virtual int UserGroups_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserGroups_Delete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserGroups_Insert(string groupName, string groupDescription)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var groupDescriptionParameter = groupDescription != null ?
                new ObjectParameter("GroupDescription", groupDescription) :
                new ObjectParameter("GroupDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserGroups_Insert", groupNameParameter, groupDescriptionParameter);
        }
    
        public virtual int UserGroups_Update(Nullable<int> iD, string groupName, string groupDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var groupDescriptionParameter = groupDescription != null ?
                new ObjectParameter("GroupDescription", groupDescription) :
                new ObjectParameter("GroupDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserGroups_Update", iDParameter, groupNameParameter, groupDescriptionParameter);
        }
    }
}
